## Audit

When a table is protected by cell suppression, by making use of the linear relation between published and suppressed cell values in atable (including its margins), it is always possible for any particular suppressed cell of a table to derive upper and lower bounds for its true value. This holds for either tables with non-negative values, and those tables containing negative values as well, when itis assumed that instead of zero, some other (possibly tight) lower bound for any cell is available to data users in advance of publication. The interval given by these bounds is called the '*feasibility interval*'. The example below illustrates the computation of the feasibility interval in the case of a simple two-dimensional table where all cells may only assume non-negative values:


|           |     1     |     2     |   Total |
|----------:|----------:|----------:|--------:|
| **1**     |  $X_{11}$ |  $X_{12}$ |   7     |
| **2**     |  $X_{21}$ |  $X_{22}$ |   3     |
| **3**     |     3     |     3     |   6     |
| **Total** |     9     |     7     |   16    |

: Example

For this table the following linear relations hold:
$$\begin{matrix}{{{X_{11} + X_{12}} = 7}{(\mathit{R1})}} \\{{{X_{21} + X_{22}} = 3}{(\mathit{R2})}} \\{{{X_{11} + X_{21}} = 6}{(\mathit{C1})}} \\{{{X_{12} + X_{22}} = 4}{(\mathit{C2})}} \\ \text{with }{X_{\mathit{ij}} \geq 0}, \forall (i,j) \end{matrix}$$

Using linear programming methodology, it is possible to derive systematically for any suppressed cell in a table a upperbound 
$(X^{\mathit{\max}})$ and a lower bound $(X_{11}^{\mathit{\min}})$ for the set of feasible values. In the example above, for cell (1,1) these bounds are $(X_{11}^{\mathit{\min}}) = 3$ and $(X_{11}^{\mathit{\max}}) = 6$.

A general mathematical statement for the linear programming problem to compute upper and lower bounds for the suppressed entries of a table is given in Fischetti and Salazar (2000)[^15].

[^15]: Fischetti, M., Salazar Gonzales, J.J. (2000), *Models and Algorithms for Optimizing Cell Suppression Problem in Tabular Data with Linear COnstraints*, in Journal of the American Statistical Association, Vol. 95, pp.916

Note that in the current implementation the $\tau$-Argus audit routine computes upper and lower bounds (i.e. the feasibility intervals) for the suppressed entries of a hierarchical table considering the *full* set of table relations -- even, if the table is a hierarchical table.After obtaining these feasibility intervals, they are compared to the protection intervals (c.f. subsection on protection levels in section 4.3.2. *Protection level* of the SDC-Handbook, Hundepool et al(2012)) and the result of this comparison will be reported to the user. When a table has been protected properly, the feasibility interval of each primary sensitive cell should cover the protection interval. These intervals will be shown by $\tau$-Argus.

### Auditing a hierarchical table

It should be noted that secondary cell suppression algorithms like Modular and Hypercube relying on a backtracking procedure (c.f. the subsection on linked and hierarchical tables in section 4.4.4.*Secondary cell suppression in hierarchical and linked tables* of theSDC-Handbook, Hundepool et all(2012)) assign secondary suppressions considering only a part of the table relations at a time, e.g. those referring to the 'current' subtable. These methods are able to protect each subtable properly in the sense that the feasibility intervals of the sensitive cells indeed cover the protection intervals. But this holds only, if the feasibility intervals are computed considering only the table relations of the particular subtable. But for a hierarchical table, feasibility intervals computed on basis of the set of relations for the *full* table normally tend to be closer than those computed on basis of separate sets of relations corresponding to individual sub-tables. Hence, in a hierarchical table, it is not unlikely that the Audit routine discovers that some cells were not protected properly.

### Discovering singleton problems

Making use of the additional knowledge of a respondent, who is the single respondent to a cell (a so called 'singleton'), it is possible to derive intervals that are much closer than without this knowledge. The audit routine could be used to identify problems in this respect in the following way: in advance of running the audit routine, set the status of a particular singleton cell from "unsafe" to "safe".

