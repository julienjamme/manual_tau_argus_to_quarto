## Audit
When a table is protected by cell suppression, by making use of thelinear relation between published and suppressed cell values in atable (including its margins), it is always possible for anyparticular suppressed cell of a table to derive upper and lower boundsfor its true value. This holds for either tables with non-negativevalues, and those tables containing negative values as well, when itis assumed that instead of zero, some other (possibly tight) lowerbound for any cell is available to data users in advance ofpublication. The interval given by these bounds is called the'*feasibility interval'*. The example below illustrates thecomputation of the feasibility interval in the case of a simpletwo-dimensional table where all cells may only assume non-negativevalues:

+-----------+---------+---------+---------+
| > Example | > 1     | > 2     | > Total |
+-----------+---------+---------+---------+
| > 1       | > X~11~ | > X~12~ | > 7     |
+-----------+---------+---------+---------+
| > 2       | > X~21~ | > X~22~ | > 3     |
+-----------+---------+---------+---------+
| > 3       | > 3     | > 3     | > 6     |
+-----------+---------+---------+---------+
| > Total   | > 9     | > 7     | > 16    |
+-----------+---------+---------+---------+
For this table the following linear relations hold:
$$\begin{matrix}{{{X_{11} + X_{12}} = 7}{(\mathit{R1})}} \\{{{X_{21} + X_{22}} = 3}{(\mathit{R2})}} \\{{{X_{11} + X_{21}} = 6}{(\mathit{C1})}} \\{{{X_{12} + X_{22}} = 4}{(\mathit{C2})}} \\{\mathit{with}{X_{\mathit{ij}} \geq 0}\mathit{for}\mathit{all}{({i,j})}}\end{matrix}$$
Using linear programming methodology, it is possible to derivesystematically for any suppressed cell in a table a upperbound$$(X^{\mathit{\max}})$$and a lower bound$$(X_{11}^{\mathit{\min}})$$for the set of feasible values. In theexample above, for cell (1,1) these boundsare$$(X_{11}^{\mathit{\min}})$$ = 3 and$$(X_{11}^{\mathit{\max}})$$ = 6 .
A general mathematical statement for the linear programming problem tocompute upper and lower bounds for the suppressed entries of a tableis given in Fischetti and Salazar (2000)^[^15]^.
Note that in the current implementation the $\tau$-Argus audit routinecomputes upper and lower bounds (i.e. the feasibility intervals) forthe suppressed entries of a hierarchical table considering the *full*set of table relations -- even, if the table is a hierarchical table.After obtaining these feasibility intervals, they are compared to theprotection intervals (c.f. subsection on protection levels in section4.3.2. *Protection level* of the SDC-Handbook, Hundepool et al(2012))and the result of this comparison will be reported to the user. When atable has been protected properly, the feasibility interval of eachprimary sensitive cell should cover the protection interval. Theseintervals will be shown by $\tau$-Argus.
Auditing a hierarchical table
It should be noted that secondary cell suppression algorithms likeModular and Hypercube relying on a backtracking procedure (c.f. thesubsection on linked and hierarchical tables in section 4.4.4.*Secondary cell suppression in hierarchical and linked tables* of theSDC-Handbook, Hundepool et all(2012)) assign secondary suppressionsconsidering only a part of the table relations at a time, e.g. thosereferring to the 'current' subtable. These methods are able to protecteach subtable properly in the sense that the feasibility intervals ofthe sensitive cells indeed cover the protection intervals. But thisholds only, if the feasibility intervals are computed considering onlythe table relations of the particular subtable. But for a hierarchicaltable, feasibility intervals computed on basis of the set of relationsfor the *full *table normally tend to be closer than those computed onbasis of separate sets of relations corresponding to individualsub-tables. Hence, in a hierarchical table, it is not unlikely thatthe Audit routine discovers that some cells were not protectedproperly.
Discovering singleton problems
Making use of the additional knowledge of a respondent, who is thesingle respondent to a cell (a so called 'singleton'), it is possibleto derive intervals that are much closer than without this knowledge.The audit routine could be used to identify problems in this respectin the following way: in advance of running the audit routine, set thestatus of a particular singleton cell from "unsafe" to "safe".

