## The Modular approach^[^11]^

The modular (HiTaS) solution is a heuristic approach to cell suppression in hierarchical tables. Hierarchical tables are specially linked tables: at least one of the spanning variables exhibits a hierarchical structure, *i.e*. contains (many) sub-totals.

In Fischetti and Salazar (1998) a theoretical framework is presented that should be able to deal with hierarchical and generally linked tables. In what follows, this will be called the mixed integer approach. In this framework, additional constraints to a linear programming problem are generated. The number of added constraints however, grows rapidly when dealing with hierarchical tables, since many dependencies exist between all possible (sub-)tables containing many (sub-)totals. The implemented heuristic approach (HiTaS) deals with a large set of (sub)-tables in a particular order. A non hierarchical table can be considered to be a hierarchical table with just one level. In that case, the approach reduces to the original mixed integer approach and hence provides the optimal solution. In case of a hierarchical table, the approach will provide a sub-optimal solution that minimises the information loss per sub-table, but not necessarily the global information loss of the complete set of hierarchically linked tables.

In the following section, a short description of the approach is given. For a more detailed description of the method, including some examples, see *e.g*., De Wolf (2002).

HiTaS deals with cell suppression in hierarchical tables using a top-down approach. The first step is to determine the primary unsafe cells in the base-table consisting of all the cells that appear when crossing the hierarchical spanning variables. This way all cells, whether representing a (sub-)total or not, are checked for primary suppression. Knowing all primary unsafe cells, the secondary cell suppressions have to be found in such a way that each (sub-)table of the base-table is protected and that the different tables cannot be combined to undo the protection of any of the other (sub-)tables. The basic idea behind the top-down approach is to start with the highest levels of the variables and calculate the secondary suppressions for the resulting table. The suppressions in the interior of the protected table is then transported to the corresponding marginal cells of the tables that appear when crossing lower levels of the two variables. All marginal cells, both suppressed and not suppressed, are then'fixed' in the calculation of the secondary suppressions of that lower level table, i.e., they are not allowed to be (secondarily) suppressed. This procedure is then repeated until the tables that are constructed by crossing the lowest levels of the spanning variables are dealt with.

A suppression pattern at a higher level only introduces restrictions on the marginal cells of lower level tables. Calculating secondary suppressions in the interior while keeping the marginal cells fixed, is then independent between the tables on that lower level, i.e., all these (sub)-tables can be dealt with independently of each other. Moreover, added primary suppressions in the interior of a lower level table are dealt with at that same level: secondary suppressions can only occur in the same interior, since the marginal cells are kept fixed.

However, when several empty cells are apparent in a low level table,it might be the case that no solution can be found if one is restricted to suppress interior cells only. Unfortunately,backtracking is then needed.

Obviously, all possible (sub)tables should be dealt with in a particular order, such that the marginal cells of the table under consideration have been protected as the interior of a previously considered table. To that end, certain groups of tables are formed in a specific way (see De Wolf (2002)). All tables within such a group are dealt separately, using the mixed integer approach.
The number of tables within a group is determined by the number of parent-categories the variables have one level up in the hierarchy. A parent-category is defined as a category that has one or more sub-categories. Note that the total number of (sub)-tables that have to be considered thus grows rapidly.

**Singletons**

Singleton cells should be treated with extra care. The single respondent in this cell could easily undo the protection if no extra measures were taken. The most dangerous situation is that there are only two singletons in a row, or one and one other primary unsafe cell. These singletons could easily disclose the other cell.

We have added options for extra singleton protection in the followingsituations.

1.  If on a row or column of a subtable there are only two singletons
    and no other primary suppressions.

2.  If there is only one singleton and one multiple primary unsafe cell.

3.  If a frequency rule is used, it could happen that two cells on a
    row/column are primary unsafe, but the sum of the two cells could
    still be unsafe. In that case it should be prevented that these
    two cells protect each other.

Cells within a table sometimes consist of exactly one contributor. Such a cell is called a singleton. Linear sensitivity rules will usually label this cell as (primary) unsafe. When cell suppression is used to protect a table with unsafe cells, these singletons need to be taken care of in a special way.

Within a suppression pattern, contributors in singletons may be able to recalculate other suppressed cells. Obviously, a contributor could always insert its own contribution and thereby recalculate its ownsuppressed cell. This could in turn lead to the possibility of recalculating other suppressed cells in the same suppression pattern. Whenever such a recalculated cell is (primary) unsafe, this means disclosure.

Within the current models used to determine suppression patterns, it is not possible to take all possible situations into account when singletons are part of a suppression pattern. However, an important group of instances of disclosure by singletons, is when a singleton is part of a row with exactly one additional (also primary) suppression.

1.  If on a row or column of a subtable there are only two singletons
    and no other primary suppressions.

2.  If there is only one singleton and one multiple primary unsafe cell.

3.  If a frequency rule is used, it could happen that two cells on a
    row/column are primary unsafe, but the sum of the two cells could
    still be unsafe. In that case it should be prevented that these
    two cells protect each other.

Note that the last situation is not really a singleton problem, but this problem is handeled in the same way.

To prevent this kind of disclosure, it would be sufficient to force an additional (third) suppression in the same row. In prior versions of $\tau$-Argus this was accomplished by increasing the protection levels of one of the (primary) unsafe cells in the row. In short, the protection level of one of the primary suppressed cells was raised in such a way that the other primary suppression would not be able to give sufficient protection. The largest primary unsafe cell in the row got the *cell value* of the other unsafe cell in the row, plus a small value, as protection level. Indeed, this forces a third suppression inthe row.

However, since the *cell value* of one of the suppressed cells was involved, this meant that the increased protection level of this cell could become quite large, which would have an effect on the suppression pattern in one of the other dimensions. In certain situations this led to oversuppression.

To circumvent this problem, the newly implemented approach adds a virtual cell to the table. That virtual cell is assigned a value equal to the sum of the two primary suppressed cells in the row, and is given the status \'(primary) unsafe\'. That virtual cell then only has to be protected against exact disclosure, i.e., it suffices to imposea small protection interval.

The table below shows an example table, displaying the singleton problem. In the first table the values of the cells are given, with inbold, italic the (primary) unsafe cells. The second table shows the names of the cells, where *c*~*ij*~ stands for the cell with coordinates (i, j).

|           | **Total** | **X1** |  **X2**  | **X3** |  **X4**  |
|:---------:|:---------:|:------:|:--------:|:------:|:--------:|
| **Total** |    227    |   73   |    33    |   93   |    25    |
|   **A**   |    146    |   52   | **_15_** |   62   | **_17_** |
|   **B**   |     81    |   24   |    18    |   31   |     8    |

: Example table to explain Singleton Problem. Bold and italic means (primary) unsafe. {.striped .hover}

|           | **Total** |  **X1**  |     **X2**     |  **X3**  |     **X4**     |
|:---------:|:---------:|:--------:|:--------------:|:--------:|:--------------:|
| **Total** |  $c_{00}$ | $c_{01}$ |    $c_{02}$    | $c_{03}$ |    $c_{04}$    |
|   **A**   |  $c_{10}$ | $c_{11}$ | **_$c_{12}$_** | $c_{13}$ | **_$c_{14}$_** |
|   **B**   |  $c_{20}$ | $c_{21}$ |    $c_{22}$    | $c_{23}$ |    $c_{24}$    |

: Names of the cells {.striped .hover}

Now assume that cell $c_{12} = (A,X2)$ is a singleton and cell $c_{14} = (A,X4)$ is unsafe according to a $p$%-rule with $p=10$. Hence,cell $c_{14}$  is the only other (primary) unsafe cell in that row. To protect cell $c_{14}$ against disclosure by the contributor of singleton $c_{12}$, a virtual cell $c_{v}$ is defined with value $32$. Moreover, that virtual cell is given a small protection interval, $(32,33)$ say. The relations that define the table structure, including the virtual cell, are given below:

---
$c_{00} = c_{01} +  c_{02} +  c_{03} +  c_{04}$
$c_{10} = c_{11} +  c_{12} +  c_{13} +  c_{04}$
$c_{20} = c_{21} +  c_{22} +  c_{23} +  c_{24}$
$c_{00} = c_{10} +  c_{20}$
$c_{01} = c_{11} +  c_{21}$
$c_{02} = c_{12} +  c_{22}$
$c_{03} = c_{13} +  c_{23}$
$c_{04} = c_{14} +  c_{24}$
$c_{v} = c_{12} +  c_{14}$
---

: Table showing the relations defining table structure of table above {.striped .hover}

Within $\tau$-Argus, this procedure is implemented in both the optimal approach as well as in the modular approach. For the modular approach, this procedure is applied to each subtable separately, whenever a subtable is dealt with within the modular approach.

This special attention to singletons is only given when the other suppressed cell in the same row is a \'true\' primary suppression. This is natural, since it has to be done prior to the search for secondary suppressions. In the modular approach, a hierarchical table is divided into many, non-hierarchical, subtables. Secondary suppressions in one table sometimes temporarily become primary suppressions in other tables during the process. I.e., those suppression are not \'true\' primary suppressions. It is therefore also natural not to construct virtual cells in case a singleton is in the same row with exactly one other primary suppression that was originally a secondary suppression. This is indeed the way it is implemented in the modular approach.

In previous versions of $\tau$-Argus a similar procedure was available. But then the additional protection was achieved by increasing the protection level of the singleton cell. This would lead however also in additional protection in other dimensions and would create over-protection

**Negative values**

The implementation by Fischetti and Salazar does not allow for negative values. However it is not uncommon, that some cells in a table have negative values. Therefore additional measures have been taken. If in a subtable during the process negative values are found ,all cell values are increased such that the lowest value becomes positive. Of course the margins have to be recalculated, but a safe protection pattern will be found.

### References on the modular method

1. Fischetti, M. and J.J. Salazar-González (1998). Models and Algorithmsfor Optimizing Cell Suppression in Tabular Data with LinearConstraints. Technical Paper, University of La Laguna, Tenerife.
2. P.P. de Wolf (2002). HiTaS: a heuristic approach to cell suppressionin hierarchical tables. Proceedings of the AMRADS meeting inLuxembourg (2002).
3. Additional reading on the optimisation models can be found at theCASC-website[**(http://research.cbs.nl/casc/Related/99wol-heu-r.pdf)**](http://research.cbs.nl/casc/Related/99wol-heu-r.pdf)

