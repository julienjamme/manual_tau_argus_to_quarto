## Preparation

-   *First steps*. Before using $\tau$-Argus for the first time, some options should be set to make $\tau$-Argus better usable in your environment. E.g. you can select the solver you want to use in secondary cell suppression. See @sec-firststeps

-   *Open Microdata*. This involves selecting both the microdata and the associated metadata. See @sec-openmicro

-   *Specify Metafile*. This shows how the metafile can be entered when there in no metafile available, or can be edited after being read in but before any tables are being specified. This includes options such as declaring variables to be explanatory or response, and setting up the hierarchical structure of the data and the location of the variables in the file. See @sec-specifymeta

-   *Specify Tables*. Declare the tables for which protection is required, along with the safety rule and minimum frequency rule on which the primary suppressions will be based. When this has been finished the tables will be computed or read in. See @sec-specifytables

-   *Process of Disclosure Control*. The main window of $\tau$-Argus will show the table that we have computed or read in and when all the safety rules for primary suppressions have been applied.

-   You can inspect the table; get information about the number of unsafe cells etc. It contains options to modify the table using global recoding. There are several options to make the table safe via secondary cell suppression and rounding. Also an audit procedure is available to check quality of any secondary suppression pattern. See @sec-processdisclosure

-   *Save Table*. The user can save the 'safe' table in a number of formats as will be seen in @sec-savesafetable. 

### First steps {#sec-firststeps}

Via (Help\|Options) you can open the options window.

Before starting the process of protecting a table, you can customise $\tau$-Argus. Some methods for secondary suppression (the modular and the optimal), but also the audit procedure require an external linear programming solver. For the complex problems of $\tau$-Argus we have concluded that the use of high quality commercial solvers can be efficient. However also a free solver can be chosen as a good alternative. Although $\tau$-Argus is freeware software these solvers are commercial packages and you have to acquire a licence for them separately. More information can be found on the casc-website ([*https://research.cbs.nl/casc/*](https://research.cbs.nl/casc/)). The choice of this solver must be made before protecting a table. The choices are either Xpress or [cplex]{.smallcaps} or the free solver soplex, the different LP_solvers supported by $\tau$-Argus. See also @sec-optimcellsuppression for more details.

![](Media/Pictures/10000000000001E600000138BEEDE4BF.png){width=13.229cm height=8.414cm}

For [cplex]{.smallcaps} the name of the licence file must specified.

Once this window has been opened details of the solver can be entered. Also the maximum time the solver is allowed to spend on each sub-table in Modular can be specified. However always a feasible solution is sought.

And the name of the logbook, by default taulogbook.txt in thetemp-directory can be chosen.

### Open a microdata file {#sec-openmicro}

In this tour we only deal with how to open a fixed format microdata file (see @sec-openmicro to @sec-specifytables). If an already constructed table is to be used, then go to the Reference chapter (@sec-openfiletable). To start disclosure controlwith $\tau$-Argus there are three possible options:

1.  Open a ascii microdata file from which a table can be constructed,

2.  Open an already completed table,

3.  Open a SPSS systemfile containing the microdata

Opening an already completed table is not part of this tour (See @sec-openfiletable). Also the SPSS-option (see @sec-fileopenmicro) is not part of this tour.

Both a microdata file and the metadata file describing this microdata file are required. The microdata file must be either a fixed format ascii file or a free format file with a specified separator. By clicking (File\|Open Microdata) you can specify both the name of the microdata file and the name of the file containing the metadata.

![](Media/Pictures/1000000000000240000000DC95A72CE6.png){width=13cm height=5.089cm}

$\tau$-Argus, expects the microdata and metadata file to be stored in separate files. The simplest way to use the program is to use the extension .ASC for the (fixed format) data file and .RDA (Record Description for Argus) for the metadata file. If the name of the metadata file is the same as the data file, except for the extension, and it already exists in the same directory, $\tau$-Argus will fill in the name of this metadata file automatically in the second text box. If no metadata file is specified, the program has the facility to specify the metadata interactively via the menu option (Specify\|Metafile). This is also the place to make changes to the metadata file. In @sec-specifymeta we will give a description of the metadata file for $\tau$-Argus.

### Specify metafile {#sec-specifymeta}

When you enter or change the metadata file interactively using $\tau$-Argus the option (Specify\|Metafile) will bring you to the following screen:

![](Media/Pictures/1000000000000381000002374DCB2899.png){width=13cm height=8.236cm}

The key elements of this window are the definitions for each variable. Most variables will be defined as one of the following.

-   Explanatory Variable: a variable to be used as a categorical (spanning) variable when defining a table.

-   Response Variable: a numerical variable to be used as a cell item in a table.

-   Weight variable: a variable containing the sampling weighting scheme.

More details on these variables along with the others options can befound in the Reference chapter (@sec-specifymetafilemicro).

Other important features of this window are as follows.

-   Codelist: $\tau$-Argus will always automatically build the codelists for the explanatory variables from the datafile. However you can enhance the presentation of the information if you can specify a codelist file (a list-of-codes of the explanatory variables) as follows.

    -   Automatic: The codelist is created from the categories in the variable.

    -   Codelist file: The codes can be read in from an external file. Each category can contain a label. The codelist is only used for enhancing the presentation but always $\tau$-Argus will build a codelist from the datafile itself.

-   Missing values: this gives information on the missing values which are attached to a codelist. Two distinct missing value indicators can be set (the reason for this is for the purposes of indicating different reasons for missing values: for example perhaps non-responses of different forms: maybe one code for the response '*don\'t know',* and another for '*refusal'*). Missing values however are not required.

-   Hierarchical codes: The hierarchy can be derived from

    -   the digits of the individual codes in the data file or

    -   a specified file containing the hierarchical structure. See @sec-hierarchyfile
  
Examples are shown in the metafile information below.

#### The Metafile

The metafile describes the variables in the microdata file, both the record layout and some additional information necessary to perform the SDC-process. Each variable is specified on one main line, followed by one or more option lines. The options ine always start with an option name enclosed in \"\<\" and \"\>\". An example is shown here. The leading spaces shown only serve only to make the file more readable; they have no other meaning.


![](Media/Pictures/metafile_example_313.png)

<!--
Year 1 2 " x"
    <RECODEABLE>
    <TOTCODE> "Total"
IndustryCode 4 5 "99999"
    <RECODEABLE>
    <TOTCODE> "Total"
    <DISTANCE> 1 3 5 7 9
    <HIERARCHICAL>
    <HIERLEVELS> 3 1 1
Size 9 2 "99"
    <RECODEABLE>
    <TOTCODE> "Alles"
Region 12 2
    <RECODEABLE>
    <TOTCODE> "Total"
    <DISTANCE> 2 4 4 4 4
    <CODELIST> "REGION.CDL"
    <HIERARCHICAL>
    <HIERCODELIST> "D:\\TauJava3\\Datata\\region2.hrc"
    <HIERLEADSTRING> "@"
Wgt 15 4
    <WEIGHT>
    <DECIMALS> 1
Var1 19 9
    <NUMERIC>
Var2 28 10
    <NUMERIC>
    <DECIMALS> 2
Var3 38 10
    <NUMERIC>
Var4 48 10
    <NUMERIC>
Var5 58 10
    <NUMERIC>
Var6 68 10
    <NUMERIC>
Var7 78 10
    <NUMERIC>
Var8 88 10
    <NUMERIC>
Request 99 1
    <NUMERIC>
-->

#### Details of the variables

*'Year'* : For this variable begins on position 1 of each record , is2 characters long and missing values are represented by 99. It is alsorecodeable implicitly stating that it is an explanatory or spanningvariable used to create the tables.

*'IndustryCode'*: For this variable begins on position 4 of eachrecord and is 5 characters long. Missing values are represented by99999. As well as being recodeable this variable is hierarchical andthe hierarchy structure is specified. The first 3 characters are inthe top hierarchy level, the 4^th^ character in the second level andthe 5^th^ character in the lowest level.

*'Size'*: For this variable begins on position 9 of each record and is2 characters long, and missing values are represented by 99. It isalso recodeable.

*'Region'*: For this variable begins on position 12 of each record andis 2 characters long. There is no missing value. There is a codelistfile *region.cdl* and of a hierarchical codelist file *region2.hrc*.Examples of these files are shown here.

*Note:* the codelist file is not essential; the content is only usedto enhance some information on the screen. The hierarchicalinformation however plays an essential role as it describes thestructure of the table and the relation between the cells.

*Note:* In both files the code for Total is not specified. $\tau$-Argusalways explicitly assumes that there will be a total in each dimensionof the table. Without totals there are no additivity constrains andhence there is no problem of Secondary Cell Suppression.

The file region.cdl:

![](Media/Pictures/region_cdl_file_3132.png)


<!---
1,Groningen
2,Friesland
3,Drenthe
4,Overijssel
5,Flevoland
6,Gelderland
7,Utrecht
8,Noord-Holland
9,Zuid-Holland
10,Zeeland
11,Noord-Brabant
12,Limburg
Nr,North
Os,East
Ws,West
Zd,South

--->

The file region.hrc:

![](Media/Pictures/region_hrc_file_3132.png)


<!--
Nr
@ 1
@ 2
@ 3
Os
@ 4
@ 5
@ 6
@ 7
Ws
@ 8
@ 9
\@10
Zd
\@11
\@12

-->

Additional details of these coding files can be found in @sec-codelistfile and @sec-hierarchyfile.

### Specify tables {#sec-specifytables}

When the metadata file is ready, the tables to be protected can be specified. This is achieved via Specify\|Tables. A window to specify the tables is presented. In the example here we have a 2 dimensional table (2 explanatory variables; Size x Region) and a response variable(Var2). A safety rule ($p$%-rule) has been defined.

![](Media/Pictures/10000000000002EC000002CD5753E43A.png){width=13cm height=12.42cm}

The key elements of this window are as follows.

#### Explanatory variables

On the left is the list box with the explanatory variables.

Click on '\>\>' moves the selected variables to the next box in which the selected explanatory variables can be seen. From the box on the left hand side, containing explanatory variables, the variables that will be used in the row or the column of the table, in a 2-way table can be selected. Up to six explanatory variables can be selected to create a table, but higher dimensions will restrict the options to process a table.

#### Cell items

The 'cell items' box contains the variables, which were declared as 'response variables' in the metafile. By using the '\>\>' button they can be moved to the 'response variable' box to be used in the defined table.

#### Response variable

Any variable in the cell items box can be chosen as the responsevariable. Also the implicit variable \<freq\> for making a frequencytable.

#### Shadow variable

The shadow variable is the variable which is used to apply the safety rule. By default this is the response variable. More details on the Shadow variable can be found in @sec-specifytablesformicro in the Reference chapter.

#### Cost variable

This variable describes the cost of each cell. These are the costs that are minimised when the pattern of secondary suppressed cells are calculated (see @sec-infolosscost in the Theory chapter for the further details). By default this is the response variable butother choices are possible. If the response or any other explicitly specified variable is used for this purpose, the radio button \'variable\' should be selected. Then, any variable name can be transferred from the cell items to the cost variable window. However if the name is empty by default the response variable will be chosen. It is also possible to use the frequency of the cells as a cost-function. This will suppress cells minimising the number of contributors to each cell. A third option is that the number of cells to be suppressed is minimised, irrespective of the size of their contributions (unity option -- cost variable is set to 1 for each cell). However this tends to the suppression of totals and marginals. Also a distance function is available. More details will be given inthe Reference Chapter along with an example (@sec-specifytablesformicro). Note that choice of the cost variable does not have any impact when using the hypercube method for secondary suppression.

#### Weight

If the data file has a sample weight, specified in the metadata file, the table can be computed taking this weight into account. In this case, the \'apply weights\' box should be ticked. More details will be given in the Reference Chapter along with an example (@sec-specifytablesformicro).

#### The safety rule

The concept of safety rules is explained in @sec-infolosscost in the chapter on Theory. In this window the left side of the window allows the type of rule to be selected, this is usually either the dominance rule or $p$% rule, along with the necessary parameter values. Several rules together can be set for any particular table.

Additionally, the minimum number of contributors (threshold rule) can be chosen. In the window this is referred to as the 'Minimum Frequency'.

Now for the readability of this chapter, brief summaries are provided of the Dominance and $p$% rules.

#### Dominance rule

This is sometimes referred to as the $(n,k)$ rule. The rule states that if the sum of contributions of the largest $n$ contributors to a cell is more than  $k$%, the cell is considered disclosive.

This is the traditional rule; however we recommend to use the $p$% rule as a better alternative. The $p$%-rule focusses more on the individual contributors to a cell.

#### $p$% rule

The $p$% rule says that if the value of a cell $X_1$ can be estimated to an accuracy of better than $p$% of the true value then it is disclosive where $X_1$ is the largest contributor to a cell.

This rule can be written as: ${{\sum\limits_{\mathit{ii} = 3}^{c}x_{i}} \geq \frac{p}{100}}x_{1}$ for the cell to be non-disclosive where *c* is the total number of contributors to the cell and the intruder is a respondent in the cell.

It is important to know that when entering this rule in $\tau$-Argus the value of $n$ refers to the number of intruders in coalition (who wish to group together to estimate the largest contributor). In general $n=1$.

A typical example would be that the sum of all reporting units excluding the largest two must be at least $10$% of the value of the largest. Therefore, in $\tau$-Argus set $p=10$ and $n=1$ as there is just one intruder in the coalition, respondent $X_2$.

*Note:* we only consider the situation for the largest contributor, as this is the worst case. If the largest is safe all contributors are safe.

The choice of safety rule is specified by the user and the chosen parameters can then be entered. From these parameters symmetric safety ranges are computed automatically prior to the secondary suppressions.

For the minimum frequency rule, a safety range is calculated from the user given range. This is usually a small positive value and is required to enable secondary suppression to be carried out.

A manual safety range is also required for cells that can be made unsafe by intervention of the user.

Other options such as the 'Request Rule' or the 'Holding Rule' will be looked at in more detail in the Reference chapter (@sec-specifytablesformicro).

When everything has been filled in, click \'˅\' to transport all the specified parameters describing the table to the 'listwindow' on the bottom. As many tables as you want may be specified, only limited by the memory of the computer. If a table is to be modified press the '\^' button.

#### Creating the Table

Pressing the 'Compute tables' button will invoke $\tau$-Argus to actually compute the tables requested and the process to start disclosure control may be invoked. $\tau$-Argus will come back showing the (first) table in a spreadsheet like view number of unsafe cells per variable, per dimension, as explained in the next @sec-processdisclosure.

